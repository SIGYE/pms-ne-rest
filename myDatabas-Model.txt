enum Role {
  ADMIN // The application admin
  USER  // This is a compuser

  @@map("roles")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}

enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("request_status")
}

enum VehicleStatus {
  PENDING
  APPROVED

  @@map("vehicle_status")
}

model User {
  id                   String              @id @default(uuid())
  names                String
  email                String              @unique
  telephone            String?             @unique
  password             String
  profilePicture       String              @default("https://firebasestorage.googleapis.com/v0/b/relaxia-services.appspot.com/o/relaxia-profiles%2Fblank-profile-picture-973460_960_720.webp?alt=media") @map("profile_picture")
  role                 Role                @default(USER)
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  vehicleRequests      ParkingRequest[]
  vehicles             Vehicle[]
  payments           Payment[]

  @@map("users")
}

model Vehicle {
  id          String        @id @default(uuid())
  plateNumber String        @unique @map("plate_number")
  color       String
  status      VehicleStatus @default(PENDING)
  userId      String        @map("user_id")
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  vehicleRequests ParkingRequest[]
  payments           Payment[]

  @@map("vehicles")
}

model ParkingSlot {
  id          String   @id @default(uuid())
  slotNumber  Int      @unique @map("slot_number")
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  parkingRequests ParkingRequest[]
  payments            Payment[]

  @@map("parking_slots")
}

model ParkingRequest {
  id             String        @id @default(uuid())
  userId         String        @map("user_id")
  vehicleId      String        @map("vehicle_id")
  parkingSlotId  String?       @map("parking_slot_id")
  checkIn        DateTime      @default(now())@map("check_in")
  checkOut       DateTime      @map("check_out")
  status         RequestStatus @default(PENDING)
  requestedAt    DateTime      @default(now()) @map("requested_at")
  approvedAt     DateTime?     @map("approved_at")
  user           User          @relation(fields: [userId], references: [id])
  vehicle        Vehicle       @relation(fields: [vehicleId], references: [id])
  parkingSlot    ParkingSlot?  @relation(fields: [parkingSlotId], references: [id])

  @@map("parking_requests")
}

model Payment {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  vehicleId     String        @map("vehicle_id")
  slotId        String        @map("slot_id")
  checkInTime   DateTime      @map("check_in_time")
  checkOutTime  DateTime      @map("check_out_time")
  durationHours Int           @map("duration_hours")
  amountPaid    Float         @map("amount_paid")
  createdAt     DateTime      @default(now()) @map("created_at")

  user          User          @relation(fields: [userId], references: [id])
  vehicle       Vehicle       @relation(fields: [vehicleId], references: [id])
  slot          ParkingSlot   @relation(fields: [slotId], references: [id])

  @@map("payments")
}