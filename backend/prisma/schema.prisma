// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER

  @@map("roles")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}

enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum VehicleStatus {
  PENDING
  APPROVED

  @@map("vehicle_status")
}

model User {
  id                   String              @id @default(uuid())
  names                String
  email                String              @unique
  telephone            String?             @unique
  password             String
  profilePicture       String              @default("https://firebasestorage.googleapis.com/v0/b/relaxia-services.appspot.com/o/relaxia-profiles%2Fblank-profile-picture-973460_960_720.webp?alt=media") @map("profile_picture")
  role                 Role                @default(USER)
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  vehicles             Vehicle[]
  carEntries CarEntry[]
    carExits   CarExit[]
    tickets    Ticket[]
    bills      Bill[]

  @@map("users")
}

model Vehicle {
  id             String        @id @default(uuid())
  plateNumber    String        @unique @map("plate_number")
  color          String
  status         VehicleStatus @default(PENDING)
  userId         String        @map("user_id")
  assignedSlotId String?       @map("assigned_slot_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  user           User          @relation(fields: [userId], references: [id])
  assignedSlot   ParkingSlot?  @relation("VehicleAssignedSlot", fields: [assignedSlotId], references: [id])

  carEntries   CarEntry[]

  @@map("vehicles")
}

model Parking {
  id          String        @id @default(uuid())
  name        String
  location    String
  code        String        @unique
  feePerHour  Float         @map("fee_per_hour")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  slots       ParkingSlot[]
  carExits    CarExit[] 
  tickets     Ticket[] 

  @@map("parking")
}

model ParkingSlot {
  id           String       @id @default(uuid())
  slotNumber   Int          @unique @map("slot_number")
  isAvailable  Boolean      @default(true) @map("is_available")
  parkingId    String      @map("parking_id")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  parking      Parking     @relation(fields: [parkingId], references: [id])
  assignedTo   Vehicle[]    @relation("VehicleAssignedSlot")
  carEntries   CarEntry[]

  @@map("parkingSlot")
}

model CarEntry {
  id            Int       @id @default(autoincrement())
  plateNumber   String
  entryDateTime DateTime  @default(now())
  exitDateTime  DateTime?
  chargedAmount Int       @default(0)
  parkingCode   String
  userId        String
  parkingSlotId       String
  user          User      @relation(fields: [userId], references: [id])
  parkingSlot         ParkingSlot @relation(fields: [parkingSlotId], references: [id])
  vehicleId String
vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  tickets       Ticket[]
  bills         Bill[]
  @@map("carentries")
}

model CarExit {
  id            Int      @id @default(autoincrement())
  plateNumber   String
  entryDateTime DateTime @default(now())
  exitDateTime  DateTime
  chargedAmount Int      @default(0)
  parkingCode   String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  parking       Parking  @relation(fields: [parkingCode], references: [code])
  @@map("carexits")
}

model Ticket {
  id         Int       @id @default(autoincrement())
  userId     String
  parkingId  String
  amount     Int
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  parking    Parking   @relation(fields: [parkingId], references: [id])
  carEntryId Int?
  carEntry   CarEntry? @relation(fields: [carEntryId], references: [id])
  @@map("tickets")
}

model Bill {
  id          Int       @id @default(autoincrement())
  userId      String
  parkingCode String
  amount      Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  carEntryId  Int?
  carEntry    CarEntry? @relation(fields: [carEntryId], references: [id])
  @@map("bills")
}
